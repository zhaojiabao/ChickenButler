<template>
	<div class="material-chart">
		<div class="select-type">
			<button-tab v-model="type">
				<button-tab-item v-for="tab in tabArr">{{ tab }}</button-tab-item>
			</button-tab>
		</div>
		<div class="line"></div>

		<group>
			<x-address :title="title" @on-hide="logHide" v-model="value" :list="addressData" :placeholder="$store.state.egg_price.area" :hide-district="false">
				<template slot="title" scope="props">
					<div :class="props.labelClass" :style="props.labelStyle" style="height:24px;line-height: 24px;">
						<icon name="map-marker" scale="1.3" class="l" style="width: 24px;"></icon>
						<div class="l">当前定位为：</div>
					</div>
				</template>
			</x-address>
		</group>

		<IEcharts :option="line" :loading="loading" @ready="onReady" @click="onClick" class="echarts" style="width:100%;height:70vh;"></IEcharts>

		<footer class="ui-footer ui-footer-stable ui-border-t">
			<ul class="ui-tiled">
				<template v-for="(date,i) in dates">
					<li :class="{active:i==selectDateIndex}" @click="selectDateIndex = i">{{ date }}</li>
				</template>
			</ul>
		</footer>

	</div>
</template>

<script>
	import { Cell, ButtonTab, ButtonTabItem, XAddress, Group } from 'vux'
	import IEcharts from 'vue-echarts-v3/src/full.vue';
	import { MaterialData, McArea } from '../../api/EggPrice'
	import 'vue-awesome/icons/map-marker'
	import Icon from 'vue-awesome/components/Icon'

	export default {
		components: {
			IEcharts,
			Cell,
			ButtonTab,
			ButtonTabItem,
			XAddress,
			Group,
			Icon
		},
		mounted() {
			this.$store.state.header.title = '原料曲线';
			this.area = this.util.deepClone(this.$store.state.egg_price.area);
			McArea().then(rs => {				
				this.addressData = this.util.haddleAddressData(rs);	
			})
		},
		watch: {
			'area': 'init',
			'selectDateIndex': 'init',
			'type': 'init'
		},
		methods: {
			init() {
				this.loading = true;
				MaterialData({
					type: this.selectDateIndex,
					data: {
						type: this.type,
						area: this.area
					}
				}).then(rs => {
					var title = this.area + ' ' + this.tabArr[this.type];
					this.line.legend.data = [title];
					this.line.xAxis[0].data = this.util.deepClone(rs.data.dates);
					this.line.series[0].data = this.util.deepClone(rs.data.price);
					this.line.series[0].name = title;
					this.line.xAxis[0].axisLabel.formatter = "{value}";
					this.echart.setOption(this.line);
					this.loading = false;
				}).catch(rs=>{
					console.log(rs)
				})
			},
			onReady(instance) {
				this.echart = instance;
				this.init();
			},
			onClick(event, instance, echarts) {
				console.log(arguments);
			},
			logHide(str) {
				if(str) {
					var area = [];
					for(var i=0;i<this.value.length;i++){
						area[i] = this.getAddressName(this.value[i]);
					}
					this.area = area.join(',');
				}
			},
			logShow(str) {
				console.log('on-show')
			},
			getAddressName(value) {
				for(var i = 0; i < this.addressData.length; i++) {
					if(value == this.addressData[i].value) return this.addressData[i].name;
				}
			}
		},
		data() {
			return {
				title: '',
				loading: true,
				echart: null,
				type: 0,
				area: '',
				value: [],
				dates: ['周', '月', '季', '年'],
				tabArr: ['玉米', '豆粕'],
				addressData: [],
				selectDateIndex: 1,
				line: {
					tooltip: {
						trigger: 'axis',
					},
					legend: {
						data: ['玉米'],
						padding: 10,
					},
					grid: {
						top: "10%",
						left: "0%",
						right: "0%",
						bottom: "10%"
					},
					calculable: true,
					xAxis: [{
						type: 'category',
						boundaryGap: false,
						axisLabel: {
							interval: 'auto',
							//rotate: 15,
							textStyle: {
								fontSize: 10,
								align: 'center'
							}
						}
					}],
					yAxis: [{
						type: 'value',
						scale: true,
						splitArea: {
							show: true
						},
						axisLabel: {
							inside: true,
							textStyle: {
								baseline: 'bottom'
							},
							formatter: '{value} 元/吨'
						},
						axisLine: {
							show: false
						}
					}],
					series: [{
						name: '玉米',
						type: 'line',
						smooth: true,
						draggable: false
					}]
				}
			}
		}

	}
</script>

<style>
	.ui-footer {
		position: absolute;
		bottom: 0;
		width: 100%;
	}
	
	.ui-tiled {
		display: -moz-box;
		display: -webkit-box;
		display: -ms-flexbox;
		display: box;
	}
	
	.ui-tiled li {
		-webkit-box-flex: 1;
		height: 50px;
		line-height: 50px;
		border-top: 1px solid #57B663;
		border-right: 1px solid #57B663;
		text-align: center;
		color: #333333;
		font-weight: bold;
		cursor: pointer;
		background: #FFFFFF;
	}
	
	.ui-tiled li:last-child {
		border-right: none;
	}
	
	.ui-tiled li.active {
		background: #57B663;
		color: #FFFFFF
	}
</style>
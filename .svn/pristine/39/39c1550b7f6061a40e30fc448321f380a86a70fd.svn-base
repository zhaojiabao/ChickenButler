<template>
	<div class="sale-address">

		<div class="select-type" v-show="is_show_type">
			<button-tab v-model="$store.state.egg_price.type">
				<button-tab-item>主产区</button-tab-item>
				<button-tab-item>主销区</button-tab-item>
			</button-tab>
		</div>
		<div class="line" v-show="is_show_type"></div>

		<group>
			<x-address :title="title" @on-hide="logHide" v-model="value" :list="addressData" :placeholder="$store.state.egg_price.area" :hide-district="is_chart">
				<template slot="title" scope="props">
					<div :class="props.labelClass" :style="props.labelStyle" style="height:24px;line-height: 24px;">
						<icon name="map-marker" scale="1.3" class="l" style="width: 24px;"></icon>
						<div class="l">当前定位为：</div>
					</div>
				</template>
			</x-address>
		</group>
		<br />
	</div>
</template>

<script>
	import { Cell, ButtonTab, ButtonTabItem, XAddress, Group, Value2nameFilter as value2name } from 'vux'
	import { salesAddress, productAddress } from '../../api/EggPrice'

	import 'vue-awesome/icons/map-marker'
	import Icon from 'vue-awesome/components/Icon'

	export default {
		components: {
			ButtonTab,
			ButtonTabItem,
			Group,
			Icon,
			Cell,
			XAddress
		},
		data() {
			return {
				title: '',
				addressData: [],
				value: [],
				is_chart: true,
				is_show_type: true
			}
		},
		mounted() {
			this.init();
			//判断路由
			var not_allowed = ['PriceForecast','MaterialChart'];
			if(not_allowed.indexOf(this.$route.name)>0) {
				this.is_show_type = false;
			}
		},
		watch: {
			'$store.state.egg_price.type': 'init'
		},
		methods: {
			//初始化地区数据
			init() {
				//判断是否是曲线页面
				if(this.$route.name == 'PriceChart') this.is_chart = false;
				this.value = this.is_chart ? ['1', '100'] : ['1', '100', '1000'];
				if(this.$store.state.egg_price.type == 0) {
					productAddress().then(rs => {
						if(rs.retcode == '2000') {
							this.addressData = this.util.haddleAddressData(rs.data);
							this.$store.state.egg_price.area = this.addressData[0]['name']+','+this.addressData[1]['name'];
						}
					})
				} else {
					salesAddress().then(rs => {
						if(rs.retcode == '2000') {
							this.addressData = this.util.haddleAddressData(rs.data);
							this.$store.state.egg_price.area = this.addressData[0]['name'];
						}
					})
				}
			},
			logHide(str) {
				//console.log(this.value)
				if(str) {
					//获取地区参数
					this.$store.state.egg_price.area = this.getAddressName(this.value[0]) + ',' + this.getAddressName(this.value[1]);
				}
			},
			logShow(str) {
				console.log('on-show')
			},
			getAddressName(value) {
				for(var i = 0; i < this.addressData.length; i++) {
					if(value == this.addressData[i].value) return this.addressData[i].name;
				}
			}
		}
	}
</script>
<style>

</style>